// Generated by Melange

import ButtonCss from "./Button.css";
import * as Caml_option from "melange.js/caml_option.js";
import * as Css from "../../../css/Css.js";
import * as Curry from "melange.js/curry.js";
import * as React from "react";
import * as JsxRuntime from "react/jsx-runtime";

const css = ButtonCss;

function Button(Props) {
  let classNameOpt = Props.className;
  let variantOpt = Props.variant;
  let dangerOpt = Props.danger;
  let buttonRef = Props.buttonRef;
  let disabledOpt = Props.disabled;
  let action = Props.action;
  let icon = Props.icon;
  let iconPositionOpt = Props.iconPosition;
  let children = Props.children;
  const className = classNameOpt !== undefined ? classNameOpt : "";
  const variant = variantOpt !== undefined ? variantOpt : "Primary";
  const danger = dangerOpt !== undefined ? dangerOpt : false;
  const disabled = disabledOpt !== undefined ? disabledOpt : false;
  const iconPosition = iconPositionOpt !== undefined ? iconPositionOpt : "Left";
  const fallbackRef = React.useRef(null);
  const variantClass = variant === "Cta" ? "Button--cta" : (
      variant === "Secondary" ? "Button--secondary" : "Button--primary"
    );
  const dangerClass = danger ? "Button--danger" : "";
  const icon$1 = function (className) {
    if (icon !== undefined) {
      return Curry._2(icon, Css.merge_list({
                      hd: "Button-icon",
                      tl: {
                        hd: className,
                        tl: /* [] */0
                      }
                    }), undefined);
    } else {
      return null;
    }
  };
  const classes = Css.merge_list({
        hd: "Button",
        tl: {
          hd: dangerClass,
          tl: {
            hd: variantClass,
            tl: {
              hd: className,
              tl: /* [] */0
            }
          }
        }
      });
  const contents = iconPosition === "Left" ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
          children: [
            icon$1("Button-icon--left"),
            JsxRuntime.jsx("span", {
                  children: children,
                  className: "Button-text"
                })
          ]
        }) : JsxRuntime.jsxs(JsxRuntime.Fragment, {
          children: [
            JsxRuntime.jsx("span", {
                  children: children,
                  className: "Button-text"
                }),
            icon$1("Button-icon--right")
          ]
        });
  if (action.NAME === "Href") {
    return JsxRuntime.jsx("a", {
                ref: buttonRef !== undefined ? Caml_option.valFromOption(buttonRef) : fallbackRef,
                children: contents,
                className: classes,
                disabled: disabled,
                href: action.VAL
              });
  } else {
    return JsxRuntime.jsx("button", {
                ref: buttonRef !== undefined ? Caml_option.valFromOption(buttonRef) : fallbackRef,
                children: contents,
                className: classes,
                disabled: disabled,
                onClick: action.VAL
              });
  }
}

const make = Button;

export {
  css ,
  make ,
}
/* css Not a pure module */
