// Generated by Melange

import * as Caml_obj from "melange.js/caml_obj.js";
import * as ReasonReactRouter from "reason-react/ReasonReactRouter.js";
import * as Stdlib__List from "melange/list.js";
import * as Stdlib__String from "melange/string.js";
import * as React from "react";

function encode(route) {
  if (typeof route === "number") {
    if (route === /* Home */0) {
      return {
              hd: "",
              tl: /* [] */0
            };
    } else {
      return {
              hd: "not-found",
              tl: /* [] */0
            };
    }
  } else if (route.TAG === /* JoinGame */0) {
    return {
            hd: "join-game",
            tl: {
              hd: route._0,
              tl: /* [] */0
            }
          };
  } else {
    return {
            hd: "play",
            tl: {
              hd: route._0,
              tl: /* [] */0
            }
          };
  }
}

function decode(path) {
  if (!path) {
    return /* Home */0;
  }
  switch (path.hd) {
    case "" :
        if (path.tl) {
          return /* NotFound */1;
        } else {
          return /* Home */0;
        }
    case "join-game" :
        const match = path.tl;
        if (match && !match.tl) {
          return {
                  TAG: /* JoinGame */0,
                  _0: match.hd
                };
        } else {
          return /* NotFound */1;
        }
    case "play" :
        const match$1 = path.tl;
        if (match$1 && !match$1.tl) {
          return {
                  TAG: /* Play */1,
                  _0: match$1.hd
                };
        } else {
          return /* NotFound */1;
        }
    default:
      return /* NotFound */1;
  }
}

function equal(a, b) {
  const a$1 = encode(a);
  const b$1 = encode(b);
  return Caml_obj.caml_equal(a$1, b$1);
}

function toAbsoluteUri(t) {
  const baseUri = window.location.origin;
  const path = Stdlib__List.fold_left((function (path, segment) {
          return path + ("/" + segment);
        }), "", encode(t));
  return baseUri + path;
}

const Route = {
  encode: encode,
  decode: decode,
  equal: equal,
  toAbsoluteUri: toAbsoluteUri
};

function decodePath(route) {
  return Stdlib__List.fold_left((function (path, segment) {
                return path + ("/" + segment);
              }), "", encode(route));
}

function push(route) {
  const path = decodePath(route);
  console.log("Going to:" + path);
  ReasonReactRouter.push(path);
}

function replace(route) {
  const path = decodePath(route);
  console.log("Going to:" + path);
  ReasonReactRouter.replace(path);
}

function useUrl(param) {
  const url = ReasonReactRouter.useUrl(undefined, undefined);
  const path = url.path;
  return {
          path: path,
          hash: url.hash,
          search: url.search,
          route: decode(path)
        };
}

function search(param) {
  const $$window = typeof window === "undefined" ? undefined : window;
  if ($$window === undefined) {
    return "";
  }
  const raw = $$window.location.search;
  switch (raw) {
    case "" :
    case "?" :
        return "";
    default:
      return raw.slice(1, undefined);
  }
}

function getParam(key) {
  const param = Stdlib__List.find_opt((function (urlParam) {
          const paramArray = Stdlib__String.split_on_char(/* '=' */61, urlParam);
          if (!paramArray) {
            return false;
          }
          const match = paramArray.tl;
          if (match && !match.tl) {
            return paramArray.hd === key;
          } else {
            return false;
          }
        }), Stdlib__String.split_on_char(/* '&' */38, search(undefined)));
  if (param === undefined) {
    return ;
  }
  const match = Stdlib__String.split_on_char(/* '=' */61, param);
  if (!match) {
    return ;
  }
  const match$1 = match.tl;
  if (match$1 && !match$1.tl) {
    return match$1.hd;
  }
  
}

const QueryString = {
  search: search,
  getParam: getParam
};

function Router$Redirect(Props) {
  let route = Props.route;
  let shouldReplaceOpt = Props.replace;
  const shouldReplace = shouldReplaceOpt !== undefined ? shouldReplaceOpt : false;
  React.useEffect((function () {
          if (shouldReplace) {
            replace(route);
          } else {
            push(route);
          }
        }), [
        route,
        shouldReplace
      ]);
  return null;
}

const Redirect = {
  make: Router$Redirect
};

export {
  Route ,
  decodePath ,
  push ,
  replace ,
  useUrl ,
  QueryString ,
  Redirect ,
}
/* ReasonReactRouter Not a pure module */
